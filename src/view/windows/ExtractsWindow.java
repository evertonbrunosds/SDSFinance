/*
 * This file is part of the SDSFinance Open Source Project.
 * SDSFinance is licensed under the GNU GPLv3.
 *
 * Copyright (c) 2020. Everton Bruno Silva dos Santos <evertonbrunogithub@yahoo.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package view.windows;

import exceptions.NullObjectException;
import javax.swing.SwingConstants;
import model.business.IAcquisition;
import util.Converter;
import util.IElement;
import view.managers.ViewControl;

/**
 * Classe responsável por comportar-se como janela de extratos.
 * @author Everton Bruno Silva dos Santos.
 */
public class ExtractsWindow extends javax.swing.JDialog {
    /**
     * Refere-se a instância da janela de extratos.
     */
    private static ExtractsWindow instance;
    
    /**
     * Método responsável por criar instância da janela.
     */
    private static void createInstance() {
        instance = new ExtractsWindow(null, true) {
            @Override
            public void dispose() {
                instance = null;
                super.dispose();
            }
        };
        ViewControl.alignTo(instance.table, SwingConstants.CENTER);
    }
    
    private static void updateWindow() {
        
    }
    
    /**
     * Método responsável por exibir a janela de extratos.
     */
    public static void showModal() {
        createInstance();
        instance.setVisible(true);
    }

    /**
     * Construtor responsável pelo instanciamento da janela de extratos.
     * @param parent Refere-se ao invocador da janela.
     * @param modal  Refere-se ao modo de exibição.
     */
    private ExtractsWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        rBtnOptForDay = new javax.swing.JRadioButtonMenuItem();
        rBtnOptForMonth = new javax.swing.JRadioButtonMenuItem();
        rBtnOptForYear = new javax.swing.JRadioButtonMenuItem();
        buttonGroup = new javax.swing.ButtonGroup();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        buttonGroup.add(rBtnOptForDay);
        rBtnOptForDay.setText("Exibir por dia");
        popupMenu.add(rBtnOptForDay);

        buttonGroup.add(rBtnOptForMonth);
        rBtnOptForMonth.setSelected(true);
        rBtnOptForMonth.setText("Exibir por mês");
        popupMenu.add(rBtnOptForMonth);

        buttonGroup.add(rBtnOptForYear);
        rBtnOptForYear.setText("Exibir por ano");
        popupMenu.add(rBtnOptForYear);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Extratos");
        setResizable(false);

        scrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scrollPaneMouseReleased(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Período", "Saldo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMouseReleased(evt);
            }
        });
        scrollPane.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(120);
            table.getColumnModel().getColumn(0).setPreferredWidth(120);
            table.getColumnModel().getColumn(0).setMaxWidth(120);
            table.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void scrollPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollPaneMouseReleased
        if(evt.isMetaDown()) {
            popupMenu.show(this, getMousePosition().x, getMousePosition().y);
        }
    }//GEN-LAST:event_scrollPaneMouseReleased

    private void tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseReleased
        if(evt.isMetaDown()) {
            popupMenu.show(this, getMousePosition().x, getMousePosition().y);
        }
    }//GEN-LAST:event_tableMouseReleased

    /**
     * @param args the command line arguments
     */
    private static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExtractsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            ExtractsWindow dialog = new ExtractsWindow(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    
    /**
     * Classe responsável por comportar-se como extrato.
     * @author Everton Bruno Silva dos Santos.
     */
    private abstract class Extract implements IElement<String> {
        /**
         * Refere-se ao valor positivo contido no extrato.
         */
        private double positiveValue;
        /**
         * Refere-se ao valor negativo contido no extrato.
         */
        private double positiveNegative;
        /**
         * Refere-se a chave do extrato.
         */
        private final String key;
        /**
         * Refere-se ao período do extrato.
         */
        private final String period;
        
        /**
         * Construtor responsável pelo instnaciamento do extrato num contexto diário.
         * @param value Refere-se ao valor do extrato.
         * @param day Refere-se ao dia do extrato.
         * @param month Refere-se ao mês do extrato.
         * @param year Refere-se ao ano do extrato.
         */
        private Extract(double value, int day, int month, int year) {
            positiveValue = 0;
            positiveNegative = 0;
            key = toString(year) + toString(month) + toString(day);
            period =  toString(day) + "/" + toString(month) + "/" + toString(year);
            add(value);
        }
        
        /**
         * Construtor responsável pelo instnaciamento do extrato num contexto mensal.
         * @param value Refere-se ao valor do extrato.
         * @param month Refere-se ao mês do extrato.
         * @param year Refere-se ao ano do extrato.
         */
        private Extract(double value, int month, int year) {
            positiveValue = 0;
            positiveNegative = 0;
            key = toString(year) + toString(month);
            period =  toString(month) + "/" + toString(year);
            add(value);
        }
        
        /**
         * Construtor responsável pelo instnaciamento do extrato num contexto anual.
         * @param value Refere-se ao valor do extrato.
         * @param year Refere-se ao ano do extrato.
         */
        private Extract(double value, int year) {
            positiveValue = 0;
            positiveNegative = 0;
            key = toString(year);
            period =  toString(year);
            add(value);
        }
        
        /**
         * Método responsável por adicionar novos valores ao extrato.
         * @param value Refere-se ao novo valor.
         */
        private void add(double value) {
            if(value > 0) {
                positiveValue += value;
            } else {
                positiveNegative += value;
            }
        }
        
        /**
         * Método responsável por adicionar novos valores ao extrato.
         * @param acquisition Refere-se a aquisição que contém em sí o novo valor.
         */
        private void add(IAcquisition acquisition) {
            add(acquisition.getTotalValue());
        }
        
        /**
         * Método responsável por retornar o valor positivo contido no extrato.
         * @return Retorna valor positivo contido no extrato.
         */
        private double getPositiveValue() {
            return positiveValue;
        }
        
        /**
         * Método responsável por retornar o valor negativo contido no extrato.
         * @return Retorna valor negativo contido no extrato.
         */
        private double getNegativeValue() {
            return positiveNegative;
        }
        
        /**
         * Método responsável por retornar o valor total contido no extrato.
         * @return Retorna valor total contido no extrato.
         */
        private double getTotalValue() {
            return positiveNegative + positiveValue;
        }

        public String getPeriod() {
            return period;
        }
        
        /**
         * Método responsável por retornar a chave do extrato.
         * @return Retorna chave do extrato.
         */
        @Override
        public Comparable<String> getKey() {
            return key;
        }
        
        /**
         * Método responsável por alterar a chave do extrato.
         * @param key Refere-se a nova chave.
         * @throws NullObjectException Exceção lançada no caso da chave ser nula.
         */
        @Override
        public void setKey(String key) throws NullObjectException {
            throw new UnsupportedOperationException("Not supported yet.");
        }
        
        /**
         * Método responsável por pré-visualizar a chave do extrato.
         * @param key Refere-se a nova chave.
         * @return Retorna pré-visualização do extrato.
         * @throws NullObjectException Exceção lançada no caso da chave ser nula.
         */
        @Override
        public Comparable<String> previewKey(String key) throws NullObjectException {
            throw new UnsupportedOperationException("Not supported yet.");
        }
        
        /**
         * Método responsável por converter em string números inteiros contidos em datas.
         * @param n Refere-se ao número inteiro.
         * @return Retorna número inteiro com dois ou mais caracteres em string.
         */
        private String toString(int n) {
            final String numberStr = Converter.toString(n);
            if (numberStr.length() < 2) {
                return "0" + numberStr;
            } else {
                return numberStr;
            }
        }
        
    }
    
    /**
     * Classe responsável por comportar-se como um extrato diário.
     * @author Everton Bruno Silva dos Santos.
     */
    private class DailyExtract extends Extract {
        
        /**
         * Construtor responsável pelo instanciamento do extrato diário.
         * @param acquisition Refere-se a aquisição.
         */
        public DailyExtract(IAcquisition acquisition) {
            super(acquisition.getTotalValue(), acquisition.getDate().getDay(), acquisition.getDate().getMonth(), acquisition.getDate().getYear());
        }
        
    }
    
    /**
     * Classe responsável por comportar-se como um extrato mensal.
     * @author Everton Bruno Silva dos Santos.
     */
    private class MonthlyExtract extends Extract {
        
        /**
         * Construtor responsável pelo instanciamento do extrato mensal.
         * @param acquisition Refere-se a aquisição.
         */
        public MonthlyExtract(IAcquisition acquisition) {
            super(acquisition.getTotalValue(), acquisition.getDate().getMonth(), acquisition.getDate().getYear());
        }
        
    }
    
    /**
     * Classe responsável por comportar-se como um extrato anual.
     * @author Everton Bruno Silva dos Santos.
     */
    private class AnnualExtract extends Extract {
        
        /**
         * Construtor responsável pelo instanciamento do extrato anual.
         * @param acquisition Refere-se a aquisição.
         */
        public AnnualExtract(IAcquisition acquisition) {
            super(acquisition.getTotalValue(), acquisition.getDate().getYear());
        }
        
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JRadioButtonMenuItem rBtnOptForDay;
    private javax.swing.JRadioButtonMenuItem rBtnOptForMonth;
    private javax.swing.JRadioButtonMenuItem rBtnOptForYear;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
